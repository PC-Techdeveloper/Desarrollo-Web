/*
¬øQU√â ES UNA HERENCIA DE CLASES?
Una herencia de clases se denomina a la caracter√≠stica donde una clase hija obtiene las propiedades y m√©todos de una clase porque se ha establecido una relaci√≥n entre ambas. Esta relaci√≥n se establece a trav√©s de la plabra clave 'extends'.
*/

class Figura {
  constructor() {
    console.log('Soy una figura geom√©trica! üü©');
  }
}

class Cuadrado extends Figura {
  constructor() {
    super();
    console.log('Soy un cuadrado! üü©');
  }
}

const primerFigura = new Cuadrado();

/*

EL M√âTODO SUPER: El m√©todo especial super() se encarga de llamar al constructor de la clase padre, tambi√©n denominada superclase, de hay su nombre. Por lo que funcionar√° en cascada e ir√° ejecutando primero el consructor del padre, y luego el texto del constructor hijo.
*/

class MiFigura {
  type = 'geom√©trica';
  color = 'naranja';

  constructor() {
    console.log('Constructor padre finalizado');
  }

  show() {
    console.log(`Soy una forma ${this.type} de color ${this.color}`);
  }

  setColor(color) {
    this.color = color;
  }
}

class MiCuadrado extends MiFigura {
  // Sobreescribiendo la propiedad type
  type = 'cuadrada';

  constructor() {
    super();
    console.log('Constructor hija finalizado.');
  }
}

const c1 = new MiCuadrado();
c1.show();

const c2 = new MiCuadrado();
c2.setColor('verde');
c2.show();

/*
ACCEDER A M√âTODOS DEL PADRE:
Tambi√©n permite utilizar la plabra clave 'super()'en m√©todos para llamar a m√©todos del padre seg√∫n interese heredar o no
*/

class Padre {
  soloPadre() {
    console.log('Tarea en el padre...');
  }
  padreHijo() {
    console.log('Tarea en el padre...');
  }
  sobreHijo() {
    console.log('Tarea en el padre...');
  }
}

class Hijo extends Padre {
  padreHijo() {
    // Accedemos con la funci√≥n super()
    super.padreHijo();
    console.log('Tarea en el hijo...');
  }

  soloHijo() {
    console.log('Tarea en el hijo...');
  }

  sobrePadre() {
    console.log('Tarea en el hijo...');
  }
}

const hijo1 = new Hijo();

hijo1.padreHijo();
